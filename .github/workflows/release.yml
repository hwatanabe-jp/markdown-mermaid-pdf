name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: markdown-mermaid-pdf

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute release metadata
        id: meta
        shell: bash
        run: |
          set -euo pipefail

          owner_lower="${GITHUB_REPOSITORY_OWNER,,}"
          image_repo="ghcr.io/${owner_lower}/${IMAGE_NAME}"

          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            version="${GITHUB_REF_NAME}"
          else
            echo "Error: This workflow should only run on tag push"
            exit 1
          fi

          image_tag="${image_repo}:${version}"

          echo "version=${version}" >>"$GITHUB_OUTPUT"
          echo "image_repo=${image_repo}" >>"$GITHUB_OUTPUT"
          echo "image_tag=${image_tag}" >>"$GITHUB_OUTPUT"

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ steps.meta.outputs.image_tag }}
            ${{ steps.meta.outputs.image_repo }}:latest

      - name: Verify pushed image manifest
        shell: bash
        run: |
          set -euo pipefail
          docker manifest inspect "${{ steps.meta.outputs.image_tag }}"

      - name: Smoke test image functionality
        shell: bash
        run: |
          set -euo pipefail
          docker pull "${{ steps.meta.outputs.image_tag }}"
          mkdir -p workspace
          rm -f workspace/test-output.pdf
          docker run --rm \
            -v "$PWD/workspace:/workspace" \
            "${{ steps.meta.outputs.image_tag }}" \
            example.md test-output.pdf
          test -f workspace/test-output.pdf
          rm -f workspace/test-output.pdf

      - name: Prepare release notes
        id: notes
        shell: bash
        run: |
          set -euo pipefail
          cat <<EOF >RELEASE_BODY.md
# markdown-mermaid-pdf container image

- Source commit: ${GITHUB_SHA}
- Image tag: ${{ steps.meta.outputs.image_tag }}
- Platforms: linux/amd64, linux/arm64

## Usage
\`\`\`bash
docker pull ${{ steps.meta.outputs.image_tag }}
docker run --rm -v "\$PWD/workspace:/workspace" ${{ steps.meta.outputs.image_tag }} document.md output.pdf
\`\`\`

## Compliance
- MIT-licensed project files (see attached LICENSE)
- Third-party license summary (see attached THIRD_PARTY_NOTICES.md)
EOF

      - name: Create or update GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          release_tag="${{ steps.meta.outputs.version }}"
          release_title="Container release ${release_tag}"
          if gh release view "${release_tag}" >/dev/null 2>&1; then
            gh release edit "${release_tag}" \
              --title "${release_title}" \
              --notes-file RELEASE_BODY.md
          else
            gh release create "${release_tag}" \
              --title "${release_title}" \
              --notes-file RELEASE_BODY.md
          fi

      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          gh release upload "${{ steps.meta.outputs.version }}" \
            --clobber \
            "LICENSE" \
            "THIRD_PARTY_NOTICES.md"
